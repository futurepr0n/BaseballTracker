import React, { useState, useEffect } from 'react';
import hellraiserAnalysisService from '../../services/hellraiserAnalysisService';
import { useTeamFilter } from '../TeamFilterContext';
import MobilePlayerCard from '../common/MobilePlayerCard';
import './HellraiserCard.css';
import '../common/MobilePlayerCard.css';

const HellraiserCard = ({ currentDate }) => {
  const [analysisData, setAnalysisData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedPathway, setSelectedPathway] = useState('all');
  const [selectedValue, setSelectedValue] = useState('all');
  const [showDetails, setShowDetails] = useState({});
  const [mobileAnalysisTab, setMobileAnalysisTab] = useState({});
  const { selectedTeam, includeMatchup, matchupTeam, shouldIncludePlayer } = useTeamFilter();

  useEffect(() => {
    loadHellraiserAnalysis();
  }, [currentDate, selectedTeam, includeMatchup]);

  const loadHellraiserAnalysis = async () => {
    try {
      console.log('🔥 HellraiserCard: Starting to load analysis...');
      setLoading(true);
      setError(null);
      
      // Convert currentDate to YYYY-MM-DD format
      let analyzeDate;
      if (currentDate) {
        const year = currentDate.getFullYear();
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const day = String(currentDate.getDate()).padStart(2, '0');
        analyzeDate = `${year}-${month}-${day}`;
      } else {
        analyzeDate = new Date().toISOString().split('T')[0];
      }
      console.log('🔥 HellraiserCard: Analyzing date:', analyzeDate);
      
      // Get team filter parameters
      const teamFilter = selectedTeam && includeMatchup ? [selectedTeam, matchupTeam] : selectedTeam ? [selectedTeam] : null;
      console.log('🔥 HellraiserCard: Team filter:', teamFilter);
      
      const analysis = await hellraiserAnalysisService.analyzeDay(analyzeDate, teamFilter);
      console.log('🔥 HellraiserCard: Analysis result:', analysis);
      console.log('🔥 HellraiserCard: ANALYSIS GENERATED BY:', analysis?.generatedBy);
      console.log('🔥 HellraiserCard: FIRST PICK NAME:', analysis?.picks?.[0]?.playerName);
      console.log('🔥 HellraiserCard: FIRST PICK PITCHER:', analysis?.picks?.[0]?.pitcher);
      
      if (analysis.error) {
        console.error('🔥 HellraiserCard: Analysis returned error:', analysis.error);
        // Even with error, we should have demo picks
        if (analysis.picks && Array.isArray(analysis.picks)) {
          setAnalysisData(analysis);
          console.log('🔥 HellraiserCard: Using error fallback with', analysis.picks.length, 'demo picks');
        } else {
          setError(analysis.error);
        }
      } else {
        setAnalysisData(analysis);
        console.log('🔥 HellraiserCard: Successfully loaded analysis with', analysis.picks?.length || 0, 'picks');
        console.log('🔥 HellraiserCard: Picks array type:', typeof analysis.picks, Array.isArray(analysis.picks));
      }
    } catch (err) {
      console.error('🔥 HellraiserCard: Error loading Hellraiser analysis:', err);
      setError('Failed to load Hellraiser analysis: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const toggleDetails = (pickIndex) => {
    setShowDetails(prev => ({
      ...prev,
      [pickIndex]: !prev[pickIndex]
    }));
  };

  const getFilteredPicks = () => {
    if (!analysisData?.picks || !Array.isArray(analysisData.picks)) {
      console.warn('🔥 HellraiserCard: No valid picks array found', analysisData);
      return [];
    }
    
    let filteredPicks = analysisData.picks;
    
    // Apply pathway filter
    if (selectedPathway !== 'all') {
      filteredPicks = filteredPicks.filter(pick => pick.pathway === selectedPathway);
    }
    
    // Apply value filter
    if (selectedValue !== 'all') {
      filteredPicks = filteredPicks.filter(pick => {
        const assessment = pick.marketEfficiency?.assessment || '';
        switch (selectedValue) {
          case 'exceptional':
            return assessment === 'Exceptional Value';
          case 'strong':
            return assessment === 'Strong Value';
          case 'undervalued':
            return assessment === 'Undervalued';
          case 'slight_value':
            return assessment === 'Slight Value';
          case 'fair':
            return assessment === 'Fair Value';
          case 'slight_overvalued':
            return assessment === 'Slight Overvalued';
          case 'overvalued':
            return assessment === 'Overvalued';
          case 'positive':
            return ['Exceptional Value', 'Strong Value', 'Undervalued', 'Slight Value'].includes(assessment);
          case 'negative':
            return ['Overvalued', 'Slight Overvalued'].includes(assessment);
          default:
            return true;
        }
      });
    }
    
    // Apply scratchpad filtering - filter by player name and team
    filteredPicks = filteredPicks.filter(pick => {
      const playerName = pick.playerName || pick.player_name || '';
      const playerTeam = pick.team || pick.Team || '';
      return shouldIncludePlayer(playerTeam, playerName);
    });
    
    return filteredPicks;
  };

  const getConfidenceColor = (score) => {
    if (score >= 80) return '#4CAF50'; // Green
    if (score >= 65) return '#FF9800'; // Orange
    if (score >= 50) return '#FFC107'; // Yellow
    return '#F44336'; // Red
  };

  const getClassificationIcon = (classification) => {
    if (classification.includes('Personal')) return '⭐';
    if (classification.includes('Longshot')) return '🎯';
    if (classification.includes('Straight')) return '✅';
    return '💎';
  };

  const getPathwayLabel = (pathway) => {
    switch (pathway) {
      case 'perfectStorm': return 'Perfect Storm';
      case 'batterDriven': return 'Batter-Driven';
      case 'pitcherDriven': return 'Pitcher-Driven';
      default: return pathway;
    }
  };

  const getPathwayDescription = (pathway) => {
    switch (pathway) {
      case 'perfectStorm': 
        return 'Multi-faceted advantage where pitcher meets vulnerability flags and batter meets elite thresholds';
      case 'batterDriven': 
        return 'Elite batter power profile against specific pitch types';
      case 'pitcherDriven': 
        return 'Exceptionally vulnerable pitcher making multiple batters viable';
      default: 
        return '';
    }
  };

  if (loading) {
    return (
      <div className="card hellraiser-card">
        <div className="glass-card-container">
          <div className="glass-header">
            <h3>🔥 Pinheads HR Picks</h3>
          </div>
          <div className="loading-state">
            <div className="loading-spinner"></div>
            <p>Analyzing matchups...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="card hellraiser-card">
        <div className="glass-card-container">
          <div className="glass-header">
            <h3>🔥 Pinheads HR Picks</h3>
          </div>
          <div className="error-state">
            <p>Error: {error}</p>
            <button onClick={loadHellraiserAnalysis} className="retry-button">
              Retry Analysis
            </button>
            <p style={{fontSize: '11px', color: '#666', marginTop: '8px'}}>
              Check browser console for detailed error logs
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Show debug info if no data loaded
  if (!analysisData) {
    return (
      <div className="card hellraiser-card">
        <div className="glass-card-container">
          <div className="glass-header">
            <h3>🔥 Pinheads HR Picks</h3>
          </div>
          <div className="error-state">
            <p>No analysis data available</p>
            <button onClick={loadHellraiserAnalysis} className="retry-button">
              Load Analysis
            </button>
            <p style={{fontSize: '11px', color: '#666', marginTop: '8px'}}>
              Debug: Loading={loading ? 'true' : 'false'}, Error={error || 'none'}
            </p>
          </div>
        </div>
      </div>
    );
  }

  const filteredPicks = getFilteredPicks();

  return (
    <div className="card hellraiser-card">
      <div className="glass-card-container">
        <div className="glass-header">
          <h3>🔥 Pinheads HR Picks</h3>
          
          <div className="compact-filters">
            <div className="filter-row">
              <span className="filter-label">Value:</span>
              <button className={selectedValue === 'all' ? 'active' : ''} onClick={() => setSelectedValue('all')}>All</button>
              <button className={selectedValue === 'positive' ? 'active' : ''} onClick={() => setSelectedValue('positive')}>💰 Value</button>
              <button className={selectedValue === 'exceptional' ? 'active' : ''} onClick={() => setSelectedValue('exceptional')}>🏆 Exceptional</button>
              <button className={selectedValue === 'fair' ? 'active' : ''} onClick={() => setSelectedValue('fair')}>⚖️ Fair</button>
              <button className={selectedValue === 'negative' ? 'active' : ''} onClick={() => setSelectedValue('negative')}>⚠️ Overpriced</button>
            </div>
            <div className="filter-row">
              <span className="filter-label">Method:</span>
              <button className={selectedPathway === 'all' ? 'active' : ''} onClick={() => setSelectedPathway('all')}>All</button>
              <button className={selectedPathway === 'perfectStorm' ? 'active' : ''} onClick={() => setSelectedPathway('perfectStorm')}>Perfect Storm</button>
              <button className={selectedPathway === 'batterDriven' ? 'active' : ''} onClick={() => setSelectedPathway('batterDriven')}>Batter-Driven</button>
              <button className={selectedPathway === 'pitcherDriven' ? 'active' : ''} onClick={() => setSelectedPathway('pitcherDriven')}>Pitcher-Driven</button>
            </div>
          </div>
        </div>

          {/* Desktop View */}
          <div className="desktop-view">
            <div className="scrollable-container">
            {filteredPicks.length === 0 ? (
              <div className="no-picks">
                <p>No picks found for {selectedPathway === 'all' ? 'today' : getPathwayLabel(selectedPathway)}</p>
              </div>
            ) : (
              <div className="picks-list">
                {filteredPicks.map((pick, index) => (
                  <div key={index} className="pick-item">
                    <div className="pick-header" onClick={() => toggleDetails(index)}>
                      <div className="pick-main-info">
                        <span className="player-name">
                          {getClassificationIcon(pick.classification)} {pick.playerName}
                        </span>
                        <span className="team">{pick.team}</span>
                        <span className="vs-info">vs {pick.pitcher}</span>
                      </div>
                      
                      <div className="pick-metrics">
                        <div 
                          className="confidence-score"
                          style={{ backgroundColor: getConfidenceColor(pick.confidenceScore) }}
                        >
                          {pick.confidenceScore}
                        </div>
                        <span className="classification">{pick.classification}</span>
                        {pick.odds && (
                          <span className="odds">
                            {pick.odds.american}
                          </span>
                        )}
                      </div>
                    </div>

                    <div className="pick-summary">
                      <span className="pathway-tag">{getPathwayLabel(pick.pathway)}</span>
                      <span className="game-info">{pick.game}</span>
                      {(pick.marketEfficiency === 'Undervalued' || pick.marketEfficiency?.value === 'positive') && (
                        <span className="value-tag">💰 Value</span>
                      )}
                    </div>

                    {showDetails[index] && (
                      <div className="pick-details">
                        <div className="reasoning-section">
                          <h5>Analysis Reasoning:</h5>
                          <p>
                            {pick.component_scores?.arsenal_matchup?.matchup_available && (
                              <span style={{color: '#1976d2', fontWeight: '600', display: 'block', marginBottom: '4px'}}>
                                🎯 Arsenal: {pick.component_scores.arsenal_matchup.overall_advantage > 0 ? '+' : ''}{pick.component_scores.arsenal_matchup.overall_advantage.toFixed(1)} advantage vs pitcher's mix
                              </span>
                            )}
                            {pick.reasoning}
                          </p>
                        </div>

                        {/* Enhanced Arsenal Matchup Analysis */}
                        {pick.component_scores?.arsenal_matchup?.matchup_available && (
                          <div className="arsenal-analysis">
                            <h5>🎯 Arsenal Matchup Analysis:</h5>
                            <div className="arsenal-details">
                              <div className="arsenal-summary">
                                <span className="arsenal-advantage">
                                  Overall Advantage: <strong>{pick.component_scores.arsenal_matchup.overall_advantage > 0 ? '+' : ''}{pick.component_scores.arsenal_matchup.overall_advantage.toFixed(1)}</strong>
                                </span>
                                <span className="arsenal-confidence">
                                  Confidence: <strong>{(pick.component_scores.arsenal_matchup.confidence * 100).toFixed(0)}%</strong>
                                </span>
                              </div>
                              
                              {pick.component_scores.arsenal_matchup.advantage_summary !== 'Limited advantages found' && (
                                <div className="arsenal-advantages">
                                  <span className="advantage-positive">✅ {pick.component_scores.arsenal_matchup.advantage_summary}</span>
                                </div>
                              )}
                              
                              {pick.component_scores.arsenal_matchup.disadvantage_summary !== 'No major weaknesses' && (
                                <div className="arsenal-concerns">
                                  <span className="advantage-negative">⚠️ {pick.component_scores.arsenal_matchup.disadvantage_summary}</span>
                                </div>
                              )}

                              {pick.component_scores.arsenal_matchup.pitch_matchups && Object.keys(pick.component_scores.arsenal_matchup.pitch_matchups).length > 0 && (
                                <div className="pitch-breakdown">
                                  <h6>Pitch-by-Pitch Breakdown:</h6>
                                  {Object.entries(pick.component_scores.arsenal_matchup.pitch_matchups).map(([pitchType, matchup]) => (
                                    <div key={pitchType} className="pitch-matchup">
                                      <span className="pitch-type">{pitchType}:</span>
                                      <span className="pitch-stats">
                                        {matchup.batter_slg.toFixed(3)} SLG vs {matchup.pitcher_usage.toFixed(0)}% usage
                                        <span className={`advantage-score ${matchup.advantage_score > 0 ? 'positive' : 'negative'}`}>
                                          ({matchup.advantage_score > 0 ? '+' : ''}{matchup.advantage_score.toFixed(1)})
                                        </span>
                                      </span>
                                    </div>
                                  ))}
                                </div>
                              )}
                            </div>
                          </div>
                        )}

                        {/* Enhanced Exit Velocity Analysis */}
                        {pick.component_scores?.batter_analysis?.data_available && (
                          <div className="exit-velocity-analysis">
                            <h5>🚀 Exit Velocity Analysis:</h5>
                            <div className="exit-velocity-details">
                              <div className="exit-velocity-summary">
                                <span className="power-percentile">
                                  Power Percentile: <strong>{pick.component_scores.batter_analysis.exit_velocity_percentile}th</strong> 
                                  {pick.component_scores.batter_analysis.exit_velocity_percentile >= 90 && <span className="elite-badge">Elite</span>}
                                  {pick.component_scores.batter_analysis.exit_velocity_percentile >= 75 && pick.component_scores.batter_analysis.exit_velocity_percentile < 90 && <span className="above-avg-badge">Above Avg</span>}
                                </span>
                                <span className="exit-velocity-avg">
                                  Exit Velocity: <strong>{pick.component_scores.batter_analysis.exit_velocity_avg} mph</strong>
                                </span>
                              </div>
                              
                              <div className="power-metrics-grid">
                                <div className="power-metric">
                                  <div className="metric-label">Barrel Rate</div>
                                  <div className="metric-value barrel-rate">
                                    <strong>{pick.component_scores.batter_analysis.barrel_rate}%</strong>
                                    {pick.component_scores.batter_analysis.barrel_rate >= 15 && <span className="metric-indicator excellent">🔥</span>}
                                    {pick.component_scores.batter_analysis.barrel_rate >= 10 && pick.component_scores.batter_analysis.barrel_rate < 15 && <span className="metric-indicator good">👍</span>}
                                  </div>
                                  <div className="metric-description">Crushing the ball consistently</div>
                                </div>
                                
                                <div className="power-metric">
                                  <div className="metric-label">Hard Hit %</div>
                                  <div className="metric-value hard-hit">
                                    <strong>{pick.component_scores.batter_analysis.hard_hit_percent}%</strong>
                                    {pick.component_scores.batter_analysis.hard_hit_percent >= 50 && <span className="metric-indicator excellent">💥</span>}
                                    {pick.component_scores.batter_analysis.hard_hit_percent >= 40 && pick.component_scores.batter_analysis.hard_hit_percent < 50 && <span className="metric-indicator good">⚡</span>}
                                  </div>
                                  <div className="metric-description">95+ mph contact rate</div>
                                </div>
                                
                                <div className="power-metric">
                                  <div className="metric-label">Sweet Spot %</div>
                                  <div className="metric-value sweet-spot">
                                    <strong>{pick.component_scores.batter_analysis.sweet_spot_percent}%</strong>
                                    {pick.component_scores.batter_analysis.sweet_spot_percent >= 30 && <span className="metric-indicator excellent">🎯</span>}
                                    {pick.component_scores.batter_analysis.sweet_spot_percent >= 25 && pick.component_scores.batter_analysis.sweet_spot_percent < 30 && <span className="metric-indicator good">📈</span>}
                                  </div>
                                  <div className="metric-description">Optimal launch angles</div>
                                </div>
                              </div>
                              
                              <div className="power-score-summary">
                                <div className="power-score-bar">
                                  <div className="power-score-label">Power Score:</div>
                                  <div className="power-score-value">
                                    <strong>{pick.component_scores.batter_analysis.power_score.toFixed(0)}/100</strong>
                                  </div>
                                  <div className="power-score-visual">
                                    <div 
                                      className="power-score-fill" 
                                      style={{width: `${Math.min(100, pick.component_scores.batter_analysis.power_score)}%`}}
                                    ></div>
                                  </div>
                                </div>
                                {pick.component_scores.batter_analysis.power_score >= 90 && (
                                  <div className="power-assessment elite">🌟 Elite Power Profile</div>
                                )}
                                {pick.component_scores.batter_analysis.power_score >= 75 && pick.component_scores.batter_analysis.power_score < 90 && (
                                  <div className="power-assessment strong">⭐ Strong Power Profile</div>
                                )}
                                {pick.component_scores.batter_analysis.power_score >= 60 && pick.component_scores.batter_analysis.power_score < 75 && (
                                  <div className="power-assessment average">📊 Average Power Profile</div>
                                )}
                              </div>
                            </div>
                          </div>
                        )}

                        {/* Recent Trends Analysis */}
                        {pick.trend_analysis?.trend_available && (
                          <div className="trends-analysis">
                            <h5>📈 Recent Trends Analysis:</h5>
                            <div className="trends-details">
                              <div className="trends-summary">
                                <span className="trend-direction">
                                  Form: <strong>{pick.trend_analysis.trend_direction === 'improving' ? '📈 Improving' : 
                                                 pick.trend_analysis.trend_direction === 'declining' ? '📉 Declining' : 
                                                 '➡️ Stable'}</strong>
                                  {pick.trend_analysis.momentum === 'positive' && <span className="momentum-badge positive">Positive Momentum</span>}
                                  {pick.trend_analysis.momentum === 'negative' && <span className="momentum-badge negative">Negative Momentum</span>}
                                </span>
                                <span className="games-analyzed">
                                  Analysis: <strong>{pick.trend_analysis.games_analyzed} games</strong>
                                </span>
                              </div>
                              
                              <div className="trend-metrics-grid">
                                <div className="trend-metric">
                                  <div className="metric-label">Recent 3G</div>
                                  <div className="metric-value recent-3">
                                    <strong>.{(pick.trend_analysis.recent_3_avg * 1000).toFixed(0)}</strong>
                                    {pick.trend_analysis.recent_3_avg > pick.trend_analysis.season_avg && <span className="trend-indicator up">↗</span>}
                                    {pick.trend_analysis.recent_3_avg < pick.trend_analysis.season_avg && <span className="trend-indicator down">↘</span>}
                                  </div>
                                  <div className="metric-comparison">
                                    {pick.trend_analysis.recent_3_avg > pick.trend_analysis.season_avg ? 
                                      `+${((pick.trend_analysis.recent_3_avg - pick.trend_analysis.season_avg) * 1000).toFixed(0)} pts` :
                                      `${((pick.trend_analysis.recent_3_avg - pick.trend_analysis.season_avg) * 1000).toFixed(0)} pts`}
                                  </div>
                                </div>
                                
                                <div className="trend-metric">
                                  <div className="metric-label">Recent 7G</div>
                                  <div className="metric-value recent-7">
                                    <strong>.{(pick.trend_analysis.recent_7_avg * 1000).toFixed(0)}</strong>
                                    {pick.trend_analysis.recent_7_avg > pick.trend_analysis.season_avg && <span className="trend-indicator up">↗</span>}
                                    {pick.trend_analysis.recent_7_avg < pick.trend_analysis.season_avg && <span className="trend-indicator down">↘</span>}
                                  </div>
                                  <div className="metric-comparison">
                                    {pick.trend_analysis.recent_7_avg > pick.trend_analysis.season_avg ? 
                                      `+${((pick.trend_analysis.recent_7_avg - pick.trend_analysis.season_avg) * 1000).toFixed(0)} pts` :
                                      `${((pick.trend_analysis.recent_7_avg - pick.trend_analysis.season_avg) * 1000).toFixed(0)} pts`}
                                  </div>
                                </div>
                                
                                <div className="trend-metric">
                                  <div className="metric-label">Season</div>
                                  <div className="metric-value season">
                                    <strong>.{(pick.trend_analysis.season_avg * 1000).toFixed(0)}</strong>
                                    <span className="baseline-indicator">Baseline</span>
                                  </div>
                                  <div className="metric-comparison">Reference</div>
                                </div>
                              </div>
                              
                              <div className="hr-trend-summary">
                                <div className="hr-trend-bar">
                                  <div className="hr-trend-label">Recent HRs:</div>
                                  <div className="hr-counts">
                                    <span className="hr-count last-3">
                                      Last 3G: <strong>{pick.trend_analysis.hr_last_3}</strong>
                                    </span>
                                    <span className="hr-count last-7">
                                      Last 7G: <strong>{pick.trend_analysis.hr_last_7}</strong>
                                    </span>
                                  </div>
                                </div>
                                
                                <div className="trend-assessment">
                                  {pick.trend_analysis.is_trending_up ? (
                                    <div className="trending trending-up">
                                      <span className="trend-icon">🔥</span>
                                      <span className="trend-text">Trending Up</span>
                                    </div>
                                  ) : pick.trend_analysis.recent_3_avg < pick.trend_analysis.season_avg * 0.8 ? (
                                    <div className="trending trending-down">
                                      <span className="trend-icon">❄️</span>
                                      <span className="trend-text">Cold Streak</span>
                                    </div>
                                  ) : (
                                    <div className="trending trending-stable">
                                      <span className="trend-icon">➡️</span>
                                      <span className="trend-text">Consistent Form</span>
                                    </div>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                        )}

                        {/* Enhanced Swing Mechanics Analysis */}
                        {(pick.swing_optimization_score > 0 || pick.component_scores?.swing_analysis) && (
                          <div className="swing-mechanics-analysis">
                            <h5>⚾ Swing Mechanics Analysis:</h5>
                            <div className="swing-mechanics-details">
                              <div className="swing-mechanics-summary">
                                <span className="optimization-score">
                                  Optimization: <strong>{pick.swing_optimization_score ? pick.swing_optimization_score.toFixed(0) : pick.component_scores?.swing_analysis?.optimization_score?.toFixed(0) || 'N/A'}%</strong>
                                  {(pick.swing_optimization_score >= 85 || pick.component_scores?.swing_analysis?.optimization_score >= 85) && <span className="optimal-badge">Optimal</span>}
                                  {((pick.swing_optimization_score >= 75 && pick.swing_optimization_score < 85) || (pick.component_scores?.swing_analysis?.optimization_score >= 75 && pick.component_scores?.swing_analysis?.optimization_score < 85)) && <span className="good-badge">Good</span>}
                                </span>
                                <span className="ideal-rate">
                                  Ideal Rate: <strong>{pick.swing_ideal_rate ? (pick.swing_ideal_rate * 100).toFixed(1) : (pick.component_scores?.swing_analysis?.ideal_attack_angle_rate * 100)?.toFixed(1) || 'N/A'}%</strong>
                                </span>
                              </div>
                              
                              <div className="swing-metrics-grid">
                                <div className="swing-metric">
                                  <div className="metric-label">Bat Speed</div>
                                  <div className="metric-value bat-speed">
                                    <strong>{pick.swing_bat_speed ? pick.swing_bat_speed.toFixed(1) : pick.component_scores?.swing_analysis?.bat_speed?.toFixed(1) || 'N/A'} mph</strong>
                                    {(pick.swing_bat_speed >= 75 || pick.component_scores?.swing_analysis?.bat_speed >= 75) && <span className="metric-indicator excellent">⚡</span>}
                                    {((pick.swing_bat_speed >= 72 && pick.swing_bat_speed < 75) || (pick.component_scores?.swing_analysis?.bat_speed >= 72 && pick.component_scores?.swing_analysis?.bat_speed < 75)) && <span className="metric-indicator good">👍</span>}
                                  </div>
                                  <div className="metric-description">Raw swing velocity</div>
                                </div>
                                
                                <div className="swing-metric">
                                  <div className="metric-label">Attack Angle</div>
                                  <div className="metric-value attack-angle">
                                    <strong>{pick.swing_attack_angle ? pick.swing_attack_angle.toFixed(1) : pick.component_scores?.swing_analysis?.attack_angle?.toFixed(1) || 'N/A'}°</strong>
                                    {((pick.swing_attack_angle >= 8 && pick.swing_attack_angle <= 16) || (pick.component_scores?.swing_analysis?.attack_angle >= 8 && pick.component_scores?.swing_analysis?.attack_angle <= 16)) && <span className="metric-indicator excellent">🎯</span>}
                                    {((pick.swing_attack_angle >= 5 && pick.swing_attack_angle < 8) || (pick.swing_attack_angle > 16 && pick.swing_attack_angle <= 20) || (pick.component_scores?.swing_analysis?.attack_angle >= 5 && pick.component_scores?.swing_analysis?.attack_angle < 8) || (pick.component_scores?.swing_analysis?.attack_angle > 16 && pick.component_scores?.swing_analysis?.attack_angle <= 20)) && <span className="metric-indicator good">📈</span>}
                                  </div>
                                  <div className="metric-description">Launch angle optimization</div>
                                </div>
                                
                                <div className="swing-metric">
                                  <div className="metric-label">Swing Path</div>
                                  <div className="metric-value swing-path">
                                    <strong>{pick.swing_path_efficiency ? (pick.swing_path_efficiency * 100).toFixed(0) : 'Optimized'}%</strong>
                                    {(pick.swing_optimization_score >= 80 || pick.component_scores?.swing_analysis?.optimization_score >= 80) && <span className="metric-indicator excellent">🔄</span>}
                                    {((pick.swing_optimization_score >= 70 && pick.swing_optimization_score < 80) || (pick.component_scores?.swing_analysis?.optimization_score >= 70 && pick.component_scores?.swing_analysis?.optimization_score < 80)) && <span className="metric-indicator good">⚙️</span>}
                                  </div>
                                  <div className="metric-description">Swing efficiency rating</div>
                                </div>
                              </div>
                              
                              <div className="swing-optimization-summary">
                                <div className="optimization-bar">
                                  <div className="optimization-label">Mechanics Score:</div>
                                  <div className="optimization-value">
                                    <strong>{pick.swing_optimization_score ? pick.swing_optimization_score.toFixed(0) : pick.component_scores?.swing_analysis?.optimization_score?.toFixed(0) || 'N/A'}/100</strong>
                                  </div>
                                  <div className="optimization-visual">
                                    <div 
                                      className="optimization-fill" 
                                      style={{width: `${Math.min(100, pick.swing_optimization_score || pick.component_scores?.swing_analysis?.optimization_score || 0)}%`}}
                                    ></div>
                                  </div>
                                </div>
                                
                                <div className="mechanics-assessment">
                                  {(pick.swing_optimization_score >= 85 || pick.component_scores?.swing_analysis?.optimization_score >= 85) ? (
                                    <div className="mechanics mechanics-elite">
                                      <span className="mechanics-icon">🌟</span>
                                      <span className="mechanics-text">Elite Mechanics</span>
                                    </div>
                                  ) : (pick.swing_optimization_score >= 75 || pick.component_scores?.swing_analysis?.optimization_score >= 75) ? (
                                    <div className="mechanics mechanics-strong">
                                      <span className="mechanics-icon">⭐</span>
                                      <span className="mechanics-text">Strong Mechanics</span>
                                    </div>
                                  ) : (pick.swing_optimization_score >= 65 || pick.component_scores?.swing_analysis?.optimization_score >= 65) ? (
                                    <div className="mechanics mechanics-average">
                                      <span className="mechanics-icon">📊</span>
                                      <span className="mechanics-text">Average Mechanics</span>
                                    </div>
                                  ) : (
                                    <div className="mechanics mechanics-needs-work">
                                      <span className="mechanics-icon">🔧</span>
                                      <span className="mechanics-text">Needs Optimization</span>
                                    </div>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                        )}

                        {/* Enhanced Pitcher Vulnerability Analysis */}
                        {pick.component_scores?.pitcher_analysis?.data_available && (
                          <div className="pitcher-vulnerability-analysis">
                            <h5>🎯 Pitcher Vulnerability Analysis:</h5>
                            <div className="pitcher-vulnerability-details">
                              <div className="pitcher-vulnerability-summary">
                                <span className="vulnerability-score">
                                  Vulnerability: <strong>{pick.component_scores.pitcher_analysis.vulnerability_score.toFixed(0)}/100</strong>
                                  {pick.component_scores.pitcher_analysis.vulnerability_score >= 75 && <span className="vulnerable-badge">High Risk</span>}
                                  {pick.component_scores.pitcher_analysis.vulnerability_score >= 60 && pick.component_scores.pitcher_analysis.vulnerability_score < 75 && <span className="moderate-badge">Moderate</span>}
                                </span>
                                <span className="era-performance">
                                  ERA: <strong>{pick.component_scores.pitcher_analysis.era}</strong>
                                  {pick.component_scores.pitcher_analysis.era >= 4.5 && <span className="struggling-badge">Struggling</span>}
                                  {pick.component_scores.pitcher_analysis.era <= 3.0 && <span className="dominant-badge">Dominant</span>}
                                </span>
                              </div>
                              
                              <div className="pitcher-metrics-grid">
                                <div className="pitcher-metric">
                                  <div className="metric-label">Contact Quality</div>
                                  <div className="metric-value contact-quality">
                                    <strong>{pick.component_scores.pitcher_analysis.exit_velocity_allowed} mph</strong>
                                    {pick.component_scores.pitcher_analysis.exit_velocity_allowed >= 92 && <span className="metric-indicator concerning">⚠️</span>}
                                    {pick.component_scores.pitcher_analysis.exit_velocity_allowed <= 88 && <span className="metric-indicator excellent">🛡️</span>}
                                  </div>
                                  <div className="metric-description">Average exit velocity allowed</div>
                                </div>
                                
                                <div className="pitcher-metric">
                                  <div className="metric-label">Barrel Rate</div>
                                  <div className="metric-value barrel-rate">
                                    <strong>{pick.component_scores.pitcher_analysis.barrel_rate_allowed}%</strong>
                                    {pick.component_scores.pitcher_analysis.barrel_rate_allowed >= 10 && <span className="metric-indicator concerning">🚨</span>}
                                    {pick.component_scores.pitcher_analysis.barrel_rate_allowed <= 6 && <span className="metric-indicator excellent">🎯</span>}
                                  </div>
                                  <div className="metric-description">Barrels allowed per contact</div>
                                </div>
                                
                                <div className="pitcher-metric">
                                  <div className="metric-label">Strikeout Rate</div>
                                  <div className="metric-value strikeout-rate">
                                    <strong>{pick.component_scores.pitcher_analysis.k_percent}%</strong>
                                    {pick.component_scores.pitcher_analysis.k_percent >= 25 && <span className="metric-indicator excellent">⚡</span>}
                                    {pick.component_scores.pitcher_analysis.k_percent <= 18 && <span className="metric-indicator concerning">📉</span>}
                                  </div>
                                  <div className="metric-description">Strikeout percentage</div>
                                </div>
                              </div>
                              
                              <div className="pitcher-vulnerability-summary-bar">
                                <div className="vulnerability-bar">
                                  <div className="vulnerability-label">Vulnerability Score:</div>
                                  <div className="vulnerability-value">
                                    <strong>{pick.component_scores.pitcher_analysis.vulnerability_score.toFixed(0)}/100</strong>
                                  </div>
                                  <div className="vulnerability-visual">
                                    <div 
                                      className="vulnerability-fill" 
                                      style={{width: `${Math.min(100, pick.component_scores.pitcher_analysis.vulnerability_score)}%`}}
                                    ></div>
                                  </div>
                                </div>
                                
                                <div className="vulnerability-assessment">
                                  {pick.component_scores.pitcher_analysis.vulnerability_score >= 75 ? (
                                    <div className="vulnerability vulnerability-high">
                                      <span className="vulnerability-icon">🚨</span>
                                      <span className="vulnerability-text">High Vulnerability</span>
                                    </div>
                                  ) : pick.component_scores.pitcher_analysis.vulnerability_score >= 60 ? (
                                    <div className="vulnerability vulnerability-moderate">
                                      <span className="vulnerability-icon">⚠️</span>
                                      <span className="vulnerability-text">Moderate Vulnerability</span>
                                    </div>
                                  ) : pick.component_scores.pitcher_analysis.vulnerability_score >= 40 ? (
                                    <div className="vulnerability vulnerability-low">
                                      <span className="vulnerability-icon">🛡️</span>
                                      <span className="vulnerability-text">Low Vulnerability</span>
                                    </div>
                                  ) : (
                                    <div className="vulnerability vulnerability-dominant">
                                      <span className="vulnerability-icon">🔒</span>
                                      <span className="vulnerability-text">Dominant Pitcher</span>
                                    </div>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                        )}

                        {pick.riskFactors?.length > 0 && (
                          <div className="risk-factors">
                            <h5>Risk Factors:</h5>
                            <ul>
                              {pick.riskFactors.map((risk, i) => (
                                <li key={i} className="risk-factor">⚠️ {risk}</li>
                              ))}
                            </ul>
                          </div>
                        )}

                        {pick.marketEfficiency && (
                          <div className="market-analysis">
                            <h5>Market Analysis:</h5>
                            <div className="market-details">
                              {typeof pick.marketEfficiency === 'string' ? (
                                // Handle legacy string format
                                <span className={`market-efficiency ${pick.marketEfficiency.toLowerCase()}`}>
                                  Market Assessment: <strong>{pick.marketEfficiency}</strong>
                                </span>
                              ) : (
                                // Handle detailed object format (preferred)
                                <>
                                  <span>Model Probability: {(pick.marketEfficiency.modelProbability * 100).toFixed(1)}%</span>
                                  <span>Implied Probability: {(pick.marketEfficiency.impliedProbability * 100).toFixed(1)}%</span>
                                  <span className={`edge ${pick.marketEfficiency.value}`}>
                                    Edge: {(pick.marketEfficiency.edge * 100).toFixed(1)}%
                                  </span>
                                  <span className={`assessment ${pick.marketEfficiency.value}`}>
                                    Assessment: <strong>{pick.marketEfficiency.assessment}</strong>
                                  </span>
                                  {pick.marketEfficiency.reasoning && (
                                    <div className="value-reasoning">
                                      <em>{pick.marketEfficiency.reasoning}</em>
                                    </div>
                                  )}
                                </>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
            </div>
          </div>

          {/* Mobile View */}
          <div className="mobile-view">
            {filteredPicks.length === 0 ? (
              <div className="no-picks">
                <p>No picks found for {selectedPathway === 'all' ? 'today' : getPathwayLabel(selectedPathway)}</p>
              </div>
            ) : (
              <div className="mobile-cards">
                {filteredPicks.slice(0, 15).map((pick, index) => {
                  const secondaryMetrics = [
                    { label: 'Method', value: getPathwayLabel(pick.pathway) },
                    { label: 'Class', value: pick.classification }
                  ];

                  // Get available breakdown tabs for this pick
                  const availableTabs = [];
                  if (pick.component_scores?.arsenal_matchup?.matchup_available) {
                    availableTabs.push({ id: 'arsenal', label: '🎯 Arsenal', icon: '🎯' });
                  }
                  if (pick.component_scores?.batter_analysis?.data_available) {
                    availableTabs.push({ id: 'power', label: '🚀 Power', icon: '🚀' });
                  }
                  if (pick.trend_analysis?.trend_available) {
                    availableTabs.push({ id: 'trends', label: '📈 Trends', icon: '📈' });
                  }
                  if (pick.swing_optimization_score > 0 || pick.component_scores?.swing_analysis) {
                    availableTabs.push({ id: 'mechanics', label: '⚾ Mechanics', icon: '⚾' });
                  }
                  if (pick.component_scores?.pitcher_analysis?.data_available) {
                    availableTabs.push({ id: 'pitcher', label: '🛡️ Pitcher', icon: '🛡️' });
                  }
                  
                  // Set default tab if not set
                  const currentTab = mobileAnalysisTab[index] || (availableTabs.length > 0 ? availableTabs[0].id : 'overview');

                  const expandableContent = (
                    <div className="mobile-pick-details">
                      <div className="mobile-analysis">
                        {/* Always show overview */}
                        <div className="analysis-item">
                          <strong>Analysis Reasoning:</strong>
                          <p style={{marginTop: '4px', fontSize: '12px', lineHeight: '1.4'}}>{pick.reasoning}</p>
                        </div>

                        {/* Mobile Breakdown Tabs */}
                        {availableTabs.length > 0 && (
                          <div className="mobile-breakdown-tabs">
                            <div className="mobile-tab-navigation">
                              {availableTabs.map(tab => (
                                <button
                                  key={tab.id}
                                  className={`mobile-tab-button ${currentTab === tab.id ? 'active' : ''}`}
                                  onClick={() => setMobileAnalysisTab(prev => ({ ...prev, [index]: tab.id }))}
                                >
                                  <span className="mobile-tab-icon">{tab.icon}</span>
                                  <span className="mobile-tab-label">{tab.label.replace(/🎯|🚀|📈|⚾/g, '').trim()}</span>
                                </button>
                              ))}
                            </div>
                            
                            <div className="mobile-tab-content">
                              {/* Arsenal Matchup Tab */}
                              {currentTab === 'arsenal' && pick.component_scores?.arsenal_matchup?.matchup_available && (
                                <div className="mobile-breakdown-section">
                                  <div style={{fontSize: '11px'}}>
                                    <div>Advantage: <strong>{pick.component_scores.arsenal_matchup.overall_advantage > 0 ? '+' : ''}{pick.component_scores.arsenal_matchup.overall_advantage.toFixed(1)}</strong> ({(pick.component_scores.arsenal_matchup.confidence * 100).toFixed(0)}% confidence)</div>
                                    {pick.component_scores.arsenal_matchup.advantage_summary !== 'Limited advantages found' && (
                                      <div style={{color: '#2e7d32', marginTop: '2px'}}>✅ {pick.component_scores.arsenal_matchup.advantage_summary}</div>
                                    )}
                                    {pick.component_scores.arsenal_matchup.disadvantage_summary !== 'No major weaknesses' && (
                                      <div style={{color: '#d84315', marginTop: '2px'}}>⚠️ {pick.component_scores.arsenal_matchup.disadvantage_summary}</div>
                                    )}
                                  </div>
                                </div>
                              )}

                              {/* Power Analysis Tab */}
                              {currentTab === 'power' && pick.component_scores?.batter_analysis?.data_available && (
                                <div className="mobile-breakdown-section">
                                  <div style={{fontSize: '11px'}}>
                                    <div>Power Percentile: <strong>{pick.component_scores.batter_analysis.exit_velocity_percentile}th</strong> ({pick.component_scores.batter_analysis.exit_velocity_avg} mph)</div>
                                    <div style={{marginTop: '2px'}}>Barrel Rate: <strong>{pick.component_scores.batter_analysis.barrel_rate}%</strong> | Hard Hit: <strong>{pick.component_scores.batter_analysis.hard_hit_percent}%</strong></div>
                                    <div style={{marginTop: '2px'}}>Sweet Spot: <strong>{pick.component_scores.batter_analysis.sweet_spot_percent}%</strong> | Power Score: <strong>{pick.component_scores.batter_analysis.power_score.toFixed(0)}/100</strong></div>
                                    {pick.component_scores.batter_analysis.power_score >= 90 && (
                                      <div style={{color: '#4caf50', marginTop: '2px', fontWeight: '600'}}>🌟 Elite Power Profile</div>
                                    )}
                                    {pick.component_scores.batter_analysis.power_score >= 75 && pick.component_scores.batter_analysis.power_score < 90 && (
                                      <div style={{color: '#ff9800', marginTop: '2px', fontWeight: '600'}}>⭐ Strong Power Profile</div>
                                    )}
                                  </div>
                                </div>
                              )}

                              {/* Trends Analysis Tab */}
                              {currentTab === 'trends' && pick.trend_analysis?.trend_available && (
                                <div className="mobile-breakdown-section">
                                  <div style={{fontSize: '11px'}}>
                                    <div>Form: <strong>{pick.trend_analysis.trend_direction === 'improving' ? '📈 Improving' : 
                                                     pick.trend_analysis.trend_direction === 'declining' ? '📉 Declining' : 
                                                     '➡️ Stable'}</strong> ({pick.trend_analysis.games_analyzed} games)</div>
                                    <div style={{marginTop: '2px'}}>Recent 3G: <strong>.{(pick.trend_analysis.recent_3_avg * 1000).toFixed(0)}</strong> | Recent 7G: <strong>.{(pick.trend_analysis.recent_7_avg * 1000).toFixed(0)}</strong> | Season: <strong>.{(pick.trend_analysis.season_avg * 1000).toFixed(0)}</strong></div>
                                    <div style={{marginTop: '2px'}}>HR: Last 3G ({pick.trend_analysis.hr_last_3}) | Last 7G ({pick.trend_analysis.hr_last_7})</div>
                                    {pick.trend_analysis.is_trending_up ? (
                                      <div style={{color: '#2e7d32', marginTop: '2px', fontWeight: '600'}}>🔥 Trending Up</div>
                                    ) : pick.trend_analysis.recent_3_avg < pick.trend_analysis.season_avg * 0.8 ? (
                                      <div style={{color: '#d32f2f', marginTop: '2px', fontWeight: '600'}}>❄️ Cold Streak</div>
                                    ) : (
                                      <div style={{color: '#616161', marginTop: '2px', fontWeight: '600'}}>➡️ Consistent Form</div>
                                    )}
                                  </div>
                                </div>
                              )}

                              {/* Swing Mechanics Tab */}
                              {currentTab === 'mechanics' && (pick.swing_optimization_score > 0 || pick.component_scores?.swing_analysis) && (
                                <div className="mobile-breakdown-section">
                                  <div style={{fontSize: '11px'}}>
                                    <div>Optimization: <strong>{pick.swing_optimization_score ? pick.swing_optimization_score.toFixed(0) : pick.component_scores?.swing_analysis?.optimization_score?.toFixed(0) || 'N/A'}%</strong> | Ideal Rate: <strong>{pick.swing_ideal_rate ? (pick.swing_ideal_rate * 100).toFixed(1) : (pick.component_scores?.swing_analysis?.ideal_attack_angle_rate * 100)?.toFixed(1) || 'N/A'}%</strong></div>
                                    <div style={{marginTop: '2px'}}>Bat Speed: <strong>{pick.swing_bat_speed ? pick.swing_bat_speed.toFixed(1) : pick.component_scores?.swing_analysis?.bat_speed?.toFixed(1) || 'N/A'} mph</strong> | Attack Angle: <strong>{pick.swing_attack_angle ? pick.swing_attack_angle.toFixed(1) : pick.component_scores?.swing_analysis?.attack_angle?.toFixed(1) || 'N/A'}°</strong></div>
                                    <div style={{marginTop: '2px'}}>Mechanics Score: <strong>{pick.swing_optimization_score ? pick.swing_optimization_score.toFixed(0) : pick.component_scores?.swing_analysis?.optimization_score?.toFixed(0) || 'N/A'}/100</strong></div>
                                    {(pick.swing_optimization_score >= 85 || pick.component_scores?.swing_analysis?.optimization_score >= 85) ? (
                                      <div style={{color: '#2e7d32', marginTop: '2px', fontWeight: '600'}}>🌟 Elite Mechanics</div>
                                    ) : (pick.swing_optimization_score >= 75 || pick.component_scores?.swing_analysis?.optimization_score >= 75) ? (
                                      <div style={{color: '#f57c00', marginTop: '2px', fontWeight: '600'}}>⭐ Strong Mechanics</div>
                                    ) : (pick.swing_optimization_score >= 65 || pick.component_scores?.swing_analysis?.optimization_score >= 65) ? (
                                      <div style={{color: '#f9a825', marginTop: '2px', fontWeight: '600'}}>📊 Average Mechanics</div>
                                    ) : (
                                      <div style={{color: '#616161', marginTop: '2px', fontWeight: '600'}}>🔧 Needs Optimization</div>
                                    )}
                                  </div>
                                </div>
                              )}

                              {/* Pitcher Vulnerability Tab */}
                              {currentTab === 'pitcher' && pick.component_scores?.pitcher_analysis?.data_available && (
                                <div className="mobile-breakdown-section">
                                  <div style={{fontSize: '11px'}}>
                                    <div>Vulnerability: <strong>{pick.component_scores.pitcher_analysis.vulnerability_score.toFixed(0)}/100</strong> | ERA: <strong>{pick.component_scores.pitcher_analysis.era}</strong></div>
                                    <div style={{marginTop: '2px'}}>Contact Quality: <strong>{pick.component_scores.pitcher_analysis.exit_velocity_allowed} mph</strong> | Barrel Rate: <strong>{pick.component_scores.pitcher_analysis.barrel_rate_allowed}%</strong></div>
                                    <div style={{marginTop: '2px'}}>Strikeout Rate: <strong>{pick.component_scores.pitcher_analysis.k_percent}%</strong></div>
                                    {pick.component_scores.pitcher_analysis.vulnerability_score >= 75 ? (
                                      <div style={{color: '#d32f2f', marginTop: '2px', fontWeight: '600'}}>🚨 High Vulnerability</div>
                                    ) : pick.component_scores.pitcher_analysis.vulnerability_score >= 60 ? (
                                      <div style={{color: '#f57c00', marginTop: '2px', fontWeight: '600'}}>⚠️ Moderate Vulnerability</div>
                                    ) : pick.component_scores.pitcher_analysis.vulnerability_score >= 40 ? (
                                      <div style={{color: '#388e3c', marginTop: '2px', fontWeight: '600'}}>🛡️ Low Vulnerability</div>
                                    ) : (
                                      <div style={{color: '#1976d2', marginTop: '2px', fontWeight: '600'}}>🔒 Dominant Pitcher</div>
                                    )}
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        )}

                        {pick.riskFactors?.length > 0 && (
                          <div className="analysis-item">
                            <strong>Risk Factors:</strong>
                            <ul style={{marginTop: '4px', fontSize: '11px', paddingLeft: '16px'}}>
                              {pick.riskFactors.map((risk, i) => (
                                <li key={i}>⚠️ {risk}</li>
                              ))}
                            </ul>
                          </div>
                        )}

                        {pick.marketEfficiency && (
                          <div className="analysis-item">
                            <strong>Market Analysis:</strong>
                            <div style={{marginTop: '4px', fontSize: '11px'}}>
                              {typeof pick.marketEfficiency === 'string' ? (
                                <div>Assessment: <strong>{pick.marketEfficiency}</strong></div>
                              ) : (
                                <>
                                  <div>Model: {(pick.marketEfficiency.modelProbability * 100).toFixed(1)}%</div>
                                  <div>Implied: {(pick.marketEfficiency.impliedProbability * 100).toFixed(1)}%</div>
                                  <div>Edge: {(pick.marketEfficiency.edge * 100).toFixed(1)}%</div>
                                  <div>Assessment: <strong>{pick.marketEfficiency.assessment}</strong></div>
                                </>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  );

                  return (
                    <MobilePlayerCard
                      key={index}
                      item={{
                        name: pick.playerName,
                        team: pick.team,
                        opponent: pick.pitcher
                      }}
                      index={index}
                      showRank={true}
                      showExpandButton={true}
                      controlled={true}
                      isExpanded={showDetails[index] || false}
                      onExpandChange={(expanded) => {
                        setShowDetails(prev => ({
                          ...prev,
                          [index]: expanded
                        }));
                      }}
                      primaryMetric={{
                        value: pick.confidenceScore,
                        label: 'Confidence'
                      }}
                      secondaryMetrics={secondaryMetrics}
                      expandableContent={expandableContent}
                      className={showDetails[index] ? 'selected' : ''}
                      customActions={
                        <div style={{display: 'flex', alignItems: 'center', gap: '8px', fontSize: '10px'}}>
                          <span className="mobile-pathway-tag">{getPathwayLabel(pick.pathway)}</span>
                          {(pick.marketEfficiency === 'Undervalued' || pick.marketEfficiency?.value === 'positive') && (
                            <span className="mobile-value-tag">💰 Value</span>
                          )}
                        </div>
                      }
                    />
                  );
                })}
              </div>
            )}
          </div>
      </div>
    </div>
  );
};

export default HellraiserCard;