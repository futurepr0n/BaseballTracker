import React, { useState, useEffect } from 'react';
import hellraiserAnalysisService from '../../services/hellraiserAnalysisService';
import { useTeamFilter } from '../TeamFilterContext';
import './HellraiserCard.css';

const HellraiserCard = ({ currentDate }) => {
  const [analysisData, setAnalysisData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedPathway, setSelectedPathway] = useState('all');
  const [selectedValue, setSelectedValue] = useState('all');
  const [showDetails, setShowDetails] = useState({});
  const { selectedTeam, includeMatchup, matchupTeam } = useTeamFilter();

  useEffect(() => {
    loadHellraiserAnalysis();
  }, [currentDate, selectedTeam, includeMatchup]);

  const loadHellraiserAnalysis = async () => {
    try {
      console.log('🔥 HellraiserCard: Starting to load analysis...');
      setLoading(true);
      setError(null);
      
      // Convert currentDate to YYYY-MM-DD format
      let analyzeDate;
      if (currentDate) {
        const year = currentDate.getFullYear();
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const day = String(currentDate.getDate()).padStart(2, '0');
        analyzeDate = `${year}-${month}-${day}`;
      } else {
        analyzeDate = new Date().toISOString().split('T')[0];
      }
      console.log('🔥 HellraiserCard: Analyzing date:', analyzeDate);
      
      // Get team filter parameters
      const teamFilter = selectedTeam && includeMatchup ? [selectedTeam, matchupTeam] : selectedTeam ? [selectedTeam] : null;
      console.log('🔥 HellraiserCard: Team filter:', teamFilter);
      
      const analysis = await hellraiserAnalysisService.analyzeDay(analyzeDate, teamFilter);
      console.log('🔥 HellraiserCard: Analysis result:', analysis);
      console.log('🔥 HellraiserCard: ANALYSIS GENERATED BY:', analysis?.generatedBy);
      console.log('🔥 HellraiserCard: FIRST PICK NAME:', analysis?.picks?.[0]?.playerName);
      console.log('🔥 HellraiserCard: FIRST PICK PITCHER:', analysis?.picks?.[0]?.pitcher);
      
      if (analysis.error) {
        console.error('🔥 HellraiserCard: Analysis returned error:', analysis.error);
        // Even with error, we should have demo picks
        if (analysis.picks && Array.isArray(analysis.picks)) {
          setAnalysisData(analysis);
          console.log('🔥 HellraiserCard: Using error fallback with', analysis.picks.length, 'demo picks');
        } else {
          setError(analysis.error);
        }
      } else {
        setAnalysisData(analysis);
        console.log('🔥 HellraiserCard: Successfully loaded analysis with', analysis.picks?.length || 0, 'picks');
        console.log('🔥 HellraiserCard: Picks array type:', typeof analysis.picks, Array.isArray(analysis.picks));
      }
    } catch (err) {
      console.error('🔥 HellraiserCard: Error loading Hellraiser analysis:', err);
      setError('Failed to load Hellraiser analysis: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const toggleDetails = (pickIndex) => {
    setShowDetails(prev => ({
      ...prev,
      [pickIndex]: !prev[pickIndex]
    }));
  };

  const getFilteredPicks = () => {
    if (!analysisData?.picks || !Array.isArray(analysisData.picks)) {
      console.warn('🔥 HellraiserCard: No valid picks array found', analysisData);
      return [];
    }
    
    let filteredPicks = analysisData.picks;
    
    // Apply pathway filter
    if (selectedPathway !== 'all') {
      filteredPicks = filteredPicks.filter(pick => pick.pathway === selectedPathway);
    }
    
    // Apply value filter
    if (selectedValue !== 'all') {
      filteredPicks = filteredPicks.filter(pick => {
        const assessment = pick.marketEfficiency?.assessment || '';
        switch (selectedValue) {
          case 'exceptional':
            return assessment === 'Exceptional Value';
          case 'strong':
            return assessment === 'Strong Value';
          case 'undervalued':
            return assessment === 'Undervalued';
          case 'slight_value':
            return assessment === 'Slight Value';
          case 'fair':
            return assessment === 'Fair Value';
          case 'slight_overvalued':
            return assessment === 'Slight Overvalued';
          case 'overvalued':
            return assessment === 'Overvalued';
          case 'positive':
            return ['Exceptional Value', 'Strong Value', 'Undervalued', 'Slight Value'].includes(assessment);
          case 'negative':
            return ['Overvalued', 'Slight Overvalued'].includes(assessment);
          default:
            return true;
        }
      });
    }
    
    return filteredPicks;
  };

  const getConfidenceColor = (score) => {
    if (score >= 80) return '#4CAF50'; // Green
    if (score >= 65) return '#FF9800'; // Orange
    if (score >= 50) return '#FFC107'; // Yellow
    return '#F44336'; // Red
  };

  const getClassificationIcon = (classification) => {
    if (classification.includes('Personal')) return '⭐';
    if (classification.includes('Longshot')) return '🎯';
    if (classification.includes('Straight')) return '✅';
    return '💎';
  };

  const getPathwayLabel = (pathway) => {
    switch (pathway) {
      case 'perfectStorm': return 'Perfect Storm';
      case 'batterDriven': return 'Batter-Driven';
      case 'pitcherDriven': return 'Pitcher-Driven';
      default: return pathway;
    }
  };

  const getPathwayDescription = (pathway) => {
    switch (pathway) {
      case 'perfectStorm': 
        return 'Multi-faceted advantage where pitcher meets vulnerability flags and batter meets elite thresholds';
      case 'batterDriven': 
        return 'Elite batter power profile against specific pitch types';
      case 'pitcherDriven': 
        return 'Exceptionally vulnerable pitcher making multiple batters viable';
      default: 
        return '';
    }
  };

  if (loading) {
    return (
      <div className="card hellraiser-card">
        <div className="glass-card-container">
          <div className="glass-header">
            <h3>🔥 Pinheads HR Picks</h3>
          </div>
          <div className="loading-state">
            <div className="loading-spinner"></div>
            <p>Analyzing matchups...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="card hellraiser-card">
        <div className="glass-card-container">
          <div className="glass-header">
            <h3>🔥 Pinheads HR Picks</h3>
          </div>
          <div className="error-state">
            <p>Error: {error}</p>
            <button onClick={loadHellraiserAnalysis} className="retry-button">
              Retry Analysis
            </button>
            <p style={{fontSize: '11px', color: '#666', marginTop: '8px'}}>
              Check browser console for detailed error logs
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Show debug info if no data loaded
  if (!analysisData) {
    return (
      <div className="card hellraiser-card">
        <div className="glass-card-container">
          <div className="glass-header">
            <h3>🔥 Pinheads HR Picks</h3>
          </div>
          <div className="error-state">
            <p>No analysis data available</p>
            <button onClick={loadHellraiserAnalysis} className="retry-button">
              Load Analysis
            </button>
            <p style={{fontSize: '11px', color: '#666', marginTop: '8px'}}>
              Debug: Loading={loading ? 'true' : 'false'}, Error={error || 'none'}
            </p>
          </div>
        </div>
      </div>
    );
  }

  const filteredPicks = getFilteredPicks();

  return (
    <div className="card hellraiser-card">
      <div className="glass-card-container">
        <div className="glass-header">
          <h3>🔥 Pinheads HR Picks</h3>
          
          {/* Compact filters within header */}
          <div className="compact-filters">
            <div className="filter-row">
              <span className="filter-label">Value:</span>
              <button className={selectedValue === 'all' ? 'active' : ''} onClick={() => setSelectedValue('all')}>All</button>
              <button className={selectedValue === 'positive' ? 'active' : ''} onClick={() => setSelectedValue('positive')}>💰 Value</button>
              <button className={selectedValue === 'exceptional' ? 'active' : ''} onClick={() => setSelectedValue('exceptional')}>🏆 Exceptional</button>
              <button className={selectedValue === 'fair' ? 'active' : ''} onClick={() => setSelectedValue('fair')}>⚖️ Fair</button>
              <button className={selectedValue === 'negative' ? 'active' : ''} onClick={() => setSelectedValue('negative')}>⚠️ Overpriced</button>
            </div>
            <div className="filter-row">
              <span className="filter-label">Method:</span>
              <button className={selectedPathway === 'all' ? 'active' : ''} onClick={() => setSelectedPathway('all')}>All</button>
              <button className={selectedPathway === 'perfectStorm' ? 'active' : ''} onClick={() => setSelectedPathway('perfectStorm')}>Perfect Storm</button>
              <button className={selectedPathway === 'batterDriven' ? 'active' : ''} onClick={() => setSelectedPathway('batterDriven')}>Batter-Driven</button>
              <button className={selectedPathway === 'pitcherDriven' ? 'active' : ''} onClick={() => setSelectedPathway('pitcherDriven')}>Pitcher-Driven</button>
            </div>
          </div>
        </div>

        <div className="scrollable-container">
          {filteredPicks.length === 0 ? (
            <div className="no-picks">
              <p>No picks found for {selectedPathway === 'all' ? 'today' : getPathwayLabel(selectedPathway)}</p>
            </div>
          ) : (
            <div className="picks-list">
              {filteredPicks.map((pick, index) => (
                <div key={index} className="pick-item">
                  <div className="pick-header" onClick={() => toggleDetails(index)}>
                    <div className="pick-main-info">
                      <span className="player-name">
                        {getClassificationIcon(pick.classification)} {pick.playerName}
                      </span>
                      <span className="team">{pick.team}</span>
                      <span className="vs-info">vs {pick.pitcher}</span>
                    </div>
                    
                    <div className="pick-metrics">
                      <div 
                        className="confidence-score"
                        style={{ backgroundColor: getConfidenceColor(pick.confidenceScore) }}
                      >
                        {pick.confidenceScore}
                      </div>
                      <span className="classification">{pick.classification}</span>
                      {pick.odds && (
                        <span className="odds">
                          {pick.odds.american}
                        </span>
                      )}
                    </div>
                  </div>

                  <div className="pick-summary">
                    <span className="pathway-tag">{getPathwayLabel(pick.pathway)}</span>
                    <span className="game-info">{pick.game}</span>
                    {(pick.marketEfficiency === 'Undervalued' || pick.marketEfficiency?.value === 'positive') && (
                      <span className="value-tag">💰 Value</span>
                    )}
                  </div>

                  {showDetails[index] && (
                    <div className="pick-details">
                      <div className="reasoning-section">
                        <h5>Analysis Reasoning:</h5>
                        <p>{pick.reasoning}</p>
                      </div>

                      {pick.riskFactors?.length > 0 && (
                        <div className="risk-factors">
                          <h5>Risk Factors:</h5>
                          <ul>
                            {pick.riskFactors.map((risk, i) => (
                              <li key={i} className="risk-factor">⚠️ {risk}</li>
                            ))}
                          </ul>
                        </div>
                      )}

                      {pick.marketEfficiency && (
                        <div className="market-analysis">
                          <h5>Market Analysis:</h5>
                          <div className="market-details">
                            {typeof pick.marketEfficiency === 'string' ? (
                              // Handle legacy string format
                              <span className={`market-efficiency ${pick.marketEfficiency.toLowerCase()}`}>
                                Market Assessment: <strong>{pick.marketEfficiency}</strong>
                              </span>
                            ) : (
                              // Handle detailed object format (preferred)
                              <>
                                <span>Model Probability: {(pick.marketEfficiency.modelProbability * 100).toFixed(1)}%</span>
                                <span>Implied Probability: {(pick.marketEfficiency.impliedProbability * 100).toFixed(1)}%</span>
                                <span className={`edge ${pick.marketEfficiency.value}`}>
                                  Edge: {(pick.marketEfficiency.edge * 100).toFixed(1)}%
                                </span>
                                <span className={`assessment ${pick.marketEfficiency.value}`}>
                                  Assessment: <strong>{pick.marketEfficiency.assessment}</strong>
                                </span>
                                {pick.marketEfficiency.reasoning && (
                                  <div className="value-reasoning">
                                    <em>{pick.marketEfficiency.reasoning}</em>
                                  </div>
                                )}
                              </>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default HellraiserCard;