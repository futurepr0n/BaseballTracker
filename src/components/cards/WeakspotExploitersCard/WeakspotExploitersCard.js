import React, { useState, useEffect, useCallback } from 'react';
import { useTeamFilter } from '../../TeamFilterContext';
import { usePlayerScratchpad } from '../../../contexts/PlayerScratchpadContext';
import weakspotExploiterService from '../../../services/weakspotExploiterService';
import GlassCard, { GlassScrollableContainer } from '../GlassCard/GlassCard';
import { getPlayerDisplayName, getTeamDisplayName } from '../../../utils/playerNameUtils';
import SimpleDesktopScratchpadIcon from '../../common/SimpleDesktopScratchpadIcon';
import './WeakspotExploitersCard.css';

const WeakspotExploitersCard = ({ currentDate }) => {
  const [exploitersData, setExploitersData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filter, setFilter] = useState('all');
  const [sortBy, setSortBy] = useState('exploitIndex');
  const [expandedRow, setExpandedRow] = useState(null);
  
  const { selectedTeam, includeMatchup, matchupTeam, shouldIncludePlayer } = useTeamFilter();
  const { 
    filterEnabled: scratchpadFilterEnabled, 
    addPlayer: addToScratchpad, 
    removePlayer: removeFromScratchpad, 
    isPlayerInScratchpad 
  } = usePlayerScratchpad();

  const loadExploitersData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Convert currentDate to YYYY-MM-DD format
      let analyzeDate;
      if (currentDate) {
        const year = currentDate.getFullYear();
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const day = String(currentDate.getDate()).padStart(2, '0');
        analyzeDate = `${year}-${month}-${day}`;
      } else {
        analyzeDate = new Date().toISOString().split('T')[0];
      }
      
      console.log(`üéØ WEAKSPOT EXPLOITERS CARD: Loading data for ${analyzeDate}`);
      
      const data = await weakspotExploiterService.generateDailyExploiters(analyzeDate);
      
      if (data.error) {
        setError(data.error);
      } else {
        setExploitersData(data);
      }
      
    } catch (err) {
      console.error('Error loading weakspot exploiters:', err);
      setError('Failed to load weakspot exploiters: ' + err.message);
    } finally {
      setLoading(false);
    }
  }, [currentDate]);

  useEffect(() => {
    loadExploitersData();
  }, [loadExploitersData]);

  const getFilteredAndSortedExploiters = useCallback(() => {
    if (!exploitersData?.exploiters) return [];

    let filtered = exploitersData.exploiters;

    // Apply team filter
    if (selectedTeam) {
      if (includeMatchup && matchupTeam) {
        filtered = filtered.filter(exploiter => 
          exploiter.team === selectedTeam || exploiter.team === matchupTeam
        );
      } else {
        filtered = filtered.filter(exploiter => exploiter.team === selectedTeam);
      }
    }

    // Apply scratchpad filter
    if (scratchpadFilterEnabled) {
      filtered = filtered.filter(exploiter => 
        isPlayerInScratchpad(exploiter.player, exploiter.team)
      );
    }

    // Apply category filter
    if (filter !== 'all') {
      filtered = filtered.filter(exploiter => {
        switch (filter) {
          case 'power':
            return exploiter.categories?.includes('Power vs Vulnerable Pitcher') || 
                   exploiter.exploitIndex > 85;
          case 'contact':
            return exploiter.categories?.includes('Contact vs Hittable Pitcher') || 
                   exploiter.categories?.includes('Hot Form');
          case 'rbi':
            return exploiter.exploitIndex > 75; // RBI spots logic
          case 'leadoff':
            return exploiter.exploitIndex > 70; // Leadoff logic
          default:
            return true;
        }
      });
    }

    // Sort the results
    return filtered.sort((a, b) => {
      switch (sortBy) {
        case 'exploitIndex':
          return b.exploitIndex - a.exploitIndex;
        case 'confidence':
          return b.confidence - a.confidence;
        case 'player':
          return a.player.localeCompare(b.player);
        case 'pitcher':
          return a.pitcher.localeCompare(b.pitcher);
        default:
          return b.exploitIndex - a.exploitIndex;
      }
    });
  }, [exploitersData, selectedTeam, includeMatchup, matchupTeam, scratchpadFilterEnabled, filter, sortBy, isPlayerInScratchpad]);

  const getExploitIndexIcon = (exploitIndex) => {
    if (exploitIndex >= 90) return 'üî•üî•üî•';
    if (exploitIndex >= 80) return 'üî•üî•';
    if (exploitIndex >= 70) return 'üî•';
    return '‚ö°';
  };

  const getExploitIndexColor = (exploitIndex) => {
    if (exploitIndex >= 90) return '#ff4d4f';
    if (exploitIndex >= 80) return '#ff7a45';
    if (exploitIndex >= 70) return '#ffa940';
    return '#52c41a';
  };

  const handleRowClick = (index) => {
    setExpandedRow(expandedRow === index ? null : index);
  };

  const handleScratchpadToggle = (exploiter, e) => {
    e.stopPropagation();
    const playerData = {
      name: exploiter.player,
      team: exploiter.team,
      type: 'exploiter'
    };

    if (isPlayerInScratchpad(exploiter.player, exploiter.team)) {
      removeFromScratchpad(playerData);
    } else {
      addToScratchpad(playerData);
    }
  };

  if (loading) {
    return (
      <GlassCard title="üéØ Weakspot Exploiters" className="weakspot-exploiters-card">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Analyzing pitcher weaknesses and lineup exploiters...</p>
        </div>
      </GlassCard>
    );
  }

  if (error) {
    return (
      <GlassCard title="üéØ Weakspot Exploiters" className="weakspot-exploiters-card">
        <div className="error-container">
          <p className="error-message">‚ö†Ô∏è {error}</p>
          <button onClick={loadExploitersData} className="retry-button">
            Retry Analysis
          </button>
        </div>
      </GlassCard>
    );
  }

  const filteredExploiters = getFilteredAndSortedExploiters();

  return (
    <GlassCard title="üéØ Weakspot Exploiters" className="weakspot-exploiters-card">
      <div className="card-header-section">
        <div className="card-subtitle">
          Today's Lineup Confirmed ‚Ä¢ {exploitersData?.gamesAnalyzed || 0} Games Analyzed
        </div>
        <div className="confidence-indicator">
          Confidence: {exploitersData?.confidence || 0}%
        </div>
      </div>

      <div className="controls-section">
        <div className="filter-controls">
          <select 
            value={filter} 
            onChange={(e) => setFilter(e.target.value)}
            className="filter-select"
          >
            <option value="all">All Exploiters</option>
            <option value="power">Power Threats</option>
            <option value="contact">Contact Hitters</option>
            <option value="rbi">RBI Spots</option>
            <option value="leadoff">Leadoff Types</option>
          </select>

          <select 
            value={sortBy} 
            onChange={(e) => setSortBy(e.target.value)}
            className="sort-select"
          >
            <option value="exploitIndex">Exploit Index</option>
            <option value="confidence">Confidence</option>
            <option value="player">Player Name</option>
            <option value="pitcher">Pitcher Name</option>
          </select>
        </div>
      </div>

      <GlassScrollableContainer className="exploiters-container">
        {filteredExploiters.length === 0 ? (
          <div className="no-exploiters">
            <p>No weakspot exploiters found for current filters.</p>
            <small>Try adjusting your team or category filters.</small>
          </div>
        ) : (
          <div className="exploiters-table">
            <div className="table-header">
              <div className="header-rank">#</div>
              <div className="header-player">Player</div>
              <div className="header-vs">vs Pitcher</div>
              <div className="header-exploit">Exploit</div>
              <div className="header-weakness">Key Weakness</div>
              <div className="header-actions">Actions</div>
            </div>

            {filteredExploiters.slice(0, 15).map((exploiter, index) => (
              <div key={`${exploiter.player}-${exploiter.pitcher}`} className="exploiter-row-container">
                <div 
                  className={`exploiter-row ${expandedRow === index ? 'expanded' : ''}`}
                  onClick={() => handleRowClick(index)}
                >
                  <div className="row-rank">
                    #{index + 1}
                  </div>
                  
                  <div className="row-player">
                    <div className="player-name">
                      {getPlayerDisplayName(exploiter.player)}
                    </div>
                    <div className="player-team">
                      {getTeamDisplayName(exploiter.team)}
                    </div>
                  </div>
                  
                  <div className="row-pitcher">
                    <div className="pitcher-name">
                      {exploiter.pitcher}
                    </div>
                  </div>
                  
                  <div className="row-exploit">
                    <div 
                      className="exploit-score"
                      style={{ color: getExploitIndexColor(exploiter.exploitIndex) }}
                    >
                      {exploiter.exploitIndex.toFixed(1)} {getExploitIndexIcon(exploiter.exploitIndex)}
                    </div>
                    <div className="confidence-small">
                      {Math.round(exploiter.confidence * 100)}% conf
                    </div>
                  </div>
                  
                  <div className="row-weakness">
                    {exploiter.keyWeakness}
                  </div>
                  
                  <div className="row-actions">
                    <SimpleDesktopScratchpadIcon
                      player={{
                        name: exploiter.player,
                        team: exploiter.team
                      }}
                      onClick={(e) => handleScratchpadToggle(exploiter, e)}
                      className="scratchpad-icon"
                    />
                  </div>
                </div>

                {expandedRow === index && (
                  <div className="expanded-details">
                    <div className="details-grid">
                      <div className="detail-section">
                        <h4>Exploiter Categories</h4>
                        <div className="categories">
                          {exploiter.categories?.map((category, idx) => (
                            <span key={idx} className="category-badge">
                              {category}
                            </span>
                          )) || <span className="no-categories">Standard Matchup</span>}
                        </div>
                      </div>

                      <div className="detail-section">
                        <h4>Game Context</h4>
                        <div className="context-info">
                          <div>Venue: {exploiter.venue || 'Unknown'}</div>
                          <div>Home Team: {exploiter.isHomeTeam ? 'Yes' : 'No'}</div>
                          {exploiter.stadium && (
                            <div>Park Factor: {exploiter.stadium.parkFactor}x HR</div>
                          )}
                        </div>
                      </div>

                      <div className="detail-section">
                        <h4>Player Stats</h4>
                        <div className="player-stats">
                          <div>AB: {exploiter.playerData?.AB || 0}</div>
                          <div>H: {exploiter.playerData?.H || 0}</div>
                          <div>HR: {exploiter.playerData?.HR || 0}</div>
                          <div>AVG: {((exploiter.playerData?.H || 0) / Math.max(1, exploiter.playerData?.AB || 1)).toFixed(3)}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </GlassScrollableContainer>

      <div className="card-footer">
        <div className="footer-stats">
          <span>Showing {Math.min(15, filteredExploiters.length)} of {filteredExploiters.length}</span>
          <span>‚Ä¢</span>
          <span>Updated: {exploitersData?.lastUpdated ? new Date(exploitersData.lastUpdated).toLocaleTimeString() : 'Unknown'}</span>
        </div>
      </div>
    </GlassCard>
  );
};

export default WeakspotExploitersCard;