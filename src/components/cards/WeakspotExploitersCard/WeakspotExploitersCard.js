import React, { useState, useEffect } from 'react';
import { useTeamFilter } from '../../TeamFilterContext';
import { usePlayerScratchpad } from '../../../contexts/PlayerScratchpadContext';
import GlassCard, { GlassScrollableContainer } from '../GlassCard/GlassCard';
import { getPlayerDisplayName, getTeamDisplayName } from '../../../utils/playerNameUtils';
import SimpleDesktopScratchpadIcon from '../../common/SimpleDesktopScratchpadIcon';
import './WeakspotExploitersCard.css';

const WeakspotExploitersCard = ({ currentDate, gameData }) => {
  const [exploitersData, setExploitersData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filter, setFilter] = useState('all');
  const [sortBy, setSortBy] = useState('exploitIndex');
  const [expandedRow, setExpandedRow] = useState(null);
  
  const { selectedTeam, includeMatchup, matchupTeam, shouldIncludePlayer } = useTeamFilter();
  const { 
    filterEnabled: scratchpadFilterEnabled, 
    addPlayer: addToScratchpad, 
    removePlayer: removeFromScratchpad, 
    isPlayerInScratchpad 
  } = usePlayerScratchpad();

  useEffect(() => {
    const loadExploitersData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Format date for file path FIRST
        const year = currentDate.getFullYear();
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const day = String(currentDate.getDate()).padStart(2, '0');
        const dateStr = `${year}-${month}-${day}`;
        
        console.log(`üéØ WEAKSPOT EXPLOITERS: GameData check`, {
          gameData: gameData?.length || 0,
          currentDateStr: dateStr
        });
        
        // Check if we have game data first (more flexible check)
        if (!gameData || gameData.length === 0) {
          console.log(`‚ö†Ô∏è WEAKSPOT EXPLOITERS: No gameData available, proceeding anyway`);
          // Don't return early - continue loading exploiters data even without gameData
        }
        
        console.log(`üéØ WEAKSPOT EXPLOITERS CARD: Loading data for ${dateStr}`);
        
        // Try to load enhanced weakspot exploiters data first
        const cacheBuster = `?t=${Date.now()}`;
        const url1 = `/data/weakspot_exploiters/enhanced_weakspot_exploiters_${dateStr}.json${cacheBuster}`;
        console.log(`üéØ Trying URL 1: ${url1}`);
        let response = await fetch(url1);
        
        // If enhanced not found, try latest enhanced file
        if (!response.ok) {
          response = await fetch(`/data/weakspot_exploiters/enhanced_weakspot_exploiters_latest.json${cacheBuster}`);
        }
        
        // Fallback to basic data if enhanced not available
        if (!response.ok) {
          response = await fetch(`/data/weakspot_exploiters/weakspot_exploiters_${dateStr}.json${cacheBuster}`);
        }
        
        // Final fallback to basic latest
        if (!response.ok) {
          response = await fetch(`/data/weakspot_exploiters/weakspot_exploiters_latest.json${cacheBuster}`);
        }
        
        if (!response.ok) {
          throw new Error('Pre-generated weakspot exploiters data not found');
        }
        
        const data = await response.json();
        
        if (data.exploiters && Array.isArray(data.exploiters)) {
          setExploitersData(data.exploiters);
          console.log(`üéØ Loaded ${data.exploiters.length} weakspot exploiters from enhanced data`);
          console.log(`üéØ Data source: ${response.url}`);
          console.log(`üéØ Analysis type: ${data.analysisType || 'unknown'}`);
          console.log(`üéØ Version: ${data.version || 'unknown'}`);
          
          // Sample enhanced data fields for debugging
          if (data.exploiters.length > 0) {
            const sample = data.exploiters[0];
            console.log(`üéØ Sample exploiter enhanced fields:`, {
              weatherFactor: sample.weatherFactor,
              parkAdjustment: sample.parkAdjustment,
              recentFormContext: sample.recentFormContext,
              lineupContext: sample.lineupContext,
              modernAnalytics: sample.modernAnalytics ? 'present' : 'missing'
            });
          }
        } else {
          setExploitersData([]);
          console.warn('No weakspot exploiters data found in file');
        }
        
      } catch (err) {
        console.error('Error loading weakspot exploiters:', err);
        setError('Failed to load weakspot exploiters data');
        setExploitersData([]);
      } finally {
        setLoading(false);
      }
    };
    
    loadExploitersData();
  }, [currentDate, gameData]);

  const getFilteredAndSortedExploiters = () => {
    if (!exploitersData || !Array.isArray(exploitersData)) {
      console.log(`üîç FILTER DEBUG: No exploitersData available`, { 
        exploitersData: exploitersData?.length || 'null/undefined', 
        isArray: Array.isArray(exploitersData) 
      });
      return [];
    }

    let filtered = exploitersData;
    console.log(`üîç FILTER DEBUG: Starting with ${filtered.length} exploiters`);

    // Apply team filter
    if (selectedTeam) {
      const beforeTeamFilter = filtered.length;
      if (includeMatchup && matchupTeam) {
        filtered = filtered.filter(exploiter => 
          exploiter.team === selectedTeam || exploiter.team === matchupTeam
        );
      } else {
        filtered = filtered.filter(exploiter => exploiter.team === selectedTeam);
      }
      console.log(`üîç FILTER DEBUG: Team filter (${selectedTeam}) reduced from ${beforeTeamFilter} to ${filtered.length}`);
    }

    // Apply scratchpad filter
    if (scratchpadFilterEnabled) {
      const beforeScratchpadFilter = filtered.length;
      filtered = filtered.filter(exploiter => 
        isPlayerInScratchpad(exploiter.player, exploiter.team)
      );
      console.log(`üîç FILTER DEBUG: Scratchpad filter reduced from ${beforeScratchpadFilter} to ${filtered.length}`);
    }

    // Apply category filter
    if (filter !== 'all') {
      const beforeCategoryFilter = filtered.length;
      filtered = filtered.filter(exploiter => {
        switch (filter) {
          case 'elite':
            return exploiter.batterClassification === 'elite_opportunity' || 
                   exploiter.batterClassification === 'strong_opportunity' ||
                   exploiter.exploitIndex >= 85;
          case 'power':
            return exploiter.batterClassification?.includes('power') || 
                   exploiter.exploitFactors?.some(factor => factor.toLowerCase().includes('barrel')) ||
                   exploiter.exploitIndex > 80;
          case 'contact':
            return exploiter.batterClassification?.includes('contact') || 
                   exploiter.exploitFactors?.some(factor => factor.toLowerCase().includes('contact'));
          case 'situational':
            return exploiter.situationalAdvantages?.length > 0 ||
                   exploiter.matchupIntelligence?.platoon_advantage;
          case 'trends':
            return exploiter.exploitFactors?.some(factor => factor.toLowerCase().includes('streak')) ||
                   exploiter.exploitFactors?.some(factor => factor.toLowerCase().includes('hot'));
          default:
            return true;
        }
      });
      console.log(`üîç FILTER DEBUG: Category filter (${filter}) reduced from ${beforeCategoryFilter} to ${filtered.length}`);
    }

    // Sort the results
    const sorted = filtered.sort((a, b) => {
      switch (sortBy) {
        case 'exploitIndex':
          return b.exploitIndex - a.exploitIndex;
        case 'combinedScore':
          return (b.combinedScore || 0) - (a.combinedScore || 0);
        case 'confidence':
          return b.confidence - a.confidence;
        case 'batterClassification':
          const classOrder = { 'elite_opportunity': 4, 'strong_opportunity': 3, 'moderate_opportunity': 2, 'marginal_opportunity': 1 };
          return (classOrder[b.batterClassification] || 0) - (classOrder[a.batterClassification] || 0);
        case 'player':
          return a.player.localeCompare(b.player);
        case 'pitcher':
          return a.pitcher.localeCompare(b.pitcher);
        default:
          return b.exploitIndex - a.exploitIndex;
      }
    });
    
    console.log(`üîç FILTER DEBUG: Final result: ${sorted.length} exploiters after sorting by ${sortBy}`);
    return sorted;
  };

  const getExploitIndexIcon = (exploitIndex) => {
    if (exploitIndex >= 90) return 'üî•üî•üî•';
    if (exploitIndex >= 80) return 'üî•üî•';
    if (exploitIndex >= 70) return 'üî•';
    return '‚ö°';
  };

  const getExploitIndexColor = (exploitIndex) => {
    if (exploitIndex >= 90) return '#ff4d4f';
    if (exploitIndex >= 80) return '#ff7a45';
    if (exploitIndex >= 70) return '#ffa940';
    return '#52c41a';
  };

  const handleRowClick = (index) => {
    setExpandedRow(expandedRow === index ? null : index);
  };

  const handleScratchpadToggle = (exploiter, e) => {
    e.stopPropagation();
    const playerData = {
      name: exploiter.player,
      team: exploiter.team,
      type: 'exploiter'
    };

    if (isPlayerInScratchpad(exploiter.player, exploiter.team)) {
      removeFromScratchpad(playerData);
    } else {
      addToScratchpad(playerData);
    }
  };

  const filteredExploiters = getFilteredAndSortedExploiters();
  
  // Debug logging for filtering issues
  console.log(`üîç WEAKSPOT DEBUG:`, {
    exploitersDataLength: exploitersData?.length || 0,
    filteredLength: filteredExploiters?.length || 0,
    selectedTeam,
    includeMatchup,
    matchupTeam,
    scratchpadFilterEnabled,
    filter,
    sortBy,
    loading,
    error
  });

  if (loading) {
    return (
      <GlassCard title="üéØ Weakspot Exploiters" className="weakspot-exploiters-card">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Analyzing pitcher weaknesses and lineup exploiters...</p>
        </div>
      </GlassCard>
    );
  }

  if (error) {
    return (
      <GlassCard title="üéØ Weakspot Exploiters" className="weakspot-exploiters-card">
        <div className="error-container">
          <p className="error-message">‚ö†Ô∏è {error}</p>
          <div style={{ fontSize: '0.9rem', color: '#666', marginTop: '8px' }}>
            Unable to load weakspot exploiters data. This feature requires pre-generated analysis files.
          </div>
        </div>
      </GlassCard>
    );
  }

  return (
    <GlassCard title="üéØ Weakspot Exploiters" className="weakspot-exploiters-card">
      <div className="card-header-section">
        <div className="card-subtitle">
          Weakspot Analysis ‚Ä¢ {gameData?.length || 0} Games Today
        </div>
        <div className="confidence-indicator">
          {filteredExploiters.length} Exploiters Found
        </div>
      </div>

      <div className="controls-section">
        <div className="filter-controls">
          <select 
            value={filter} 
            onChange={(e) => setFilter(e.target.value)}
            className="filter-select"
          >
            <option value="all">All Exploiters</option>
            <option value="elite">Elite Opportunities</option>
            <option value="power">Power Threats</option>
            <option value="contact">Contact Hitters</option>
            <option value="situational">With Advantages</option>
            <option value="trends">Hot Streaks</option>
          </select>

          <select 
            value={sortBy} 
            onChange={(e) => setSortBy(e.target.value)}
            className="sort-select"
          >
            <option value="exploitIndex">Exploit Index</option>
            <option value="combinedScore">Combined Score</option>
            <option value="confidence">Confidence</option>
            <option value="batterClassification">Classification</option>
            <option value="player">Player Name</option>
            <option value="pitcher">Pitcher Name</option>
          </select>
        </div>
      </div>

      <GlassScrollableContainer className="exploiters-container">
        {filteredExploiters.length === 0 ? (
          <div className="no-exploiters">
            <p>No weakspot exploiters found for current filters.</p>
            <small>Try adjusting your team or category filters.</small>
          </div>
        ) : (
          <div className="exploiters-table">
            <div className="table-header">
              <div className="header-rank">#</div>
              <div className="header-player">Player</div>
              <div className="header-vs">vs Pitcher</div>
              <div className="header-exploit">Exploit</div>
              <div className="header-weakness">Key Weakness</div>
              <div className="header-actions">Actions</div>
            </div>

            {filteredExploiters.map((exploiter, index) => (
              <div key={`${exploiter.player}-${exploiter.pitcher}`} className="exploiter-row-container">
                <div 
                  className={`exploiter-row ${expandedRow === index ? 'expanded' : ''}`}
                  onClick={() => handleRowClick(index)}
                >
                  <div className="row-rank">
                    #{index + 1}
                  </div>
                  
                  <div className="row-player">
                    <div className="player-name">
                      {typeof exploiter.player === 'string' ? exploiter.player : getPlayerDisplayName(exploiter.player)}
                    </div>
                    <div className="player-team">
                      {typeof exploiter.team === 'string' ? exploiter.team : getTeamDisplayName(exploiter.team)}
                    </div>
                  </div>
                  
                  <div className="row-pitcher">
                    <div className="pitcher-name">
                      {exploiter.pitcher}
                    </div>
                  </div>
                  
                  <div className="row-exploit">
                    <div 
                      className="exploit-score"
                      style={{ color: getExploitIndexColor(exploiter.exploitIndex) }}
                    >
                      {exploiter.exploitIndex.toFixed(1)} {getExploitIndexIcon(exploiter.exploitIndex)}
                    </div>
                    <div className="confidence-small">
                      {Math.round(exploiter.confidence * 100)}% conf
                    </div>
                  </div>
                  
                  <div className="row-weakness">
                    {exploiter.keyWeakness}
                  </div>
                  
                  <div className="row-actions">
                    <SimpleDesktopScratchpadIcon
                      player={{
                        name: exploiter.player,
                        team: exploiter.team
                      }}
                      onClick={(e) => handleScratchpadToggle(exploiter, e)}
                      className="scratchpad-icon"
                    />
                  </div>
                </div>

                {expandedRow === index && (
                  <div className="expanded-details">
                    <div className="details-grid">
                      <div className="detail-section">
                        <h4>üéØ Enhanced Analysis</h4>
                        <div className="enhanced-analysis">
                          <div className="classification-badge">
                            <strong>Classification:</strong> {exploiter.batterClassification || 'Standard'}
                          </div>
                          <div className="combined-score">
                            <strong>Combined Score:</strong> {exploiter.combinedScore?.toFixed(1) || 'N/A'}
                          </div>
                          <div className="data-quality">
                            <strong>Data Quality:</strong> {exploiter.dataQuality || 'Unknown'}
                          </div>
                          {exploiter.parkAdjustment && exploiter.parkAdjustment !== 1.0 && (
                            <div className="park-adjustment">
                              <strong>üèüÔ∏è Park Factor:</strong> {exploiter.parkAdjustment.toFixed(2)}x
                            </div>
                          )}
                          {exploiter.weatherFactor && exploiter.weatherFactor !== 1.0 && (
                            <div className="weather-factor">
                              <strong>üå§Ô∏è Weather Factor:</strong> {exploiter.weatherFactor.toFixed(2)}x
                            </div>
                          )}
                        </div>
                      </div>

                      <div className="detail-section">
                        <h4>üî• Exploit Factors</h4>
                        <div className="exploit-factors">
                          {exploiter.exploitFactors?.length > 0 ? (
                            exploiter.exploitFactors.map((factor, idx) => (
                              <div key={idx} className="exploit-factor">
                                ‚Ä¢ {factor}
                              </div>
                            ))
                          ) : (
                            <div className="no-factors">No specific exploit factors</div>
                          )}
                        </div>
                      </div>

                      <div className="detail-section">
                        <h4>‚ö° Situational Advantages</h4>
                        <div className="situational-advantages">
                          {exploiter.situationalAdvantages?.length > 0 ? (
                            exploiter.situationalAdvantages.map((advantage, idx) => (
                              <div key={idx} className="situational-advantage">
                                üéØ {advantage}
                              </div>
                            ))
                          ) : (
                            <div className="no-advantages">No specific situational advantages</div>
                          )}
                        </div>
                      </div>

                      <div className="detail-section">
                        <h4>üèüÔ∏è Game Context</h4>
                        <div className="context-info">
                          <div><strong>Venue:</strong> {exploiter.venue || 'Unknown'}</div>
                          <div><strong>Opposing Team:</strong> {exploiter.opposingTeam || 'Unknown'}</div>
                          {exploiter.matchupIntelligence?.platoon_advantage && (
                            <div><strong>Platoon Advantage:</strong> Yes</div>
                          )}
                          {exploiter.recentFormContext && Object.keys(exploiter.recentFormContext).length > 0 ? (
                            <div className="recent-form">
                              <strong>üìà Recent Form:</strong>
                              {Object.entries(exploiter.recentFormContext).map(([key, value]) => (
                                <div key={key} className="form-detail">
                                  ‚Ä¢ {key}: {typeof value === 'number' ? value.toFixed(3) : typeof value === 'object' && value !== null ? JSON.stringify(value) : value}
                                </div>
                              ))}
                            </div>
                          ) : (
                            <div className="no-recent-form">
                              <strong>üìà Recent Form:</strong> No recent trend data available
                            </div>
                          )}
                          {exploiter.lineupContext && Object.keys(exploiter.lineupContext).length > 0 ? (
                            <div className="lineup-context">
                              <strong>‚öæ Lineup Context:</strong>
                              {Object.entries(exploiter.lineupContext).map(([key, value]) => (
                                <div key={key} className="lineup-detail">
                                  ‚Ä¢ {key}: {typeof value === 'number' ? value.toFixed(2) : typeof value === 'object' && value !== null ? JSON.stringify(value) : value}
                                </div>
                              ))}
                            </div>
                          ) : (
                            <div className="no-lineup-context">
                              <strong>‚öæ Lineup Context:</strong> No lineup position data available
                            </div>
                          )}
                        </div>
                      </div>

                      {exploiter.modernAnalytics && (
                        <div className="detail-section">
                          <h4>‚öîÔ∏è Arsenal Analysis</h4>
                          <div className="arsenal-analysis">
                            {exploiter.modernAnalytics.expectedStatsGap && (
                              <div className="expected-gaps">
                                <strong>üìä Expected Performance Gaps:</strong>
                                {exploiter.modernAnalytics.expectedStatsGap.xba_gap && (
                                  <div>‚Ä¢ xBA Gap: {exploiter.modernAnalytics.expectedStatsGap.xba_gap.toFixed(3)}</div>
                                )}
                                {exploiter.modernAnalytics.expectedStatsGap.xslg_gap && (
                                  <div>‚Ä¢ xSLG Gap: {exploiter.modernAnalytics.expectedStatsGap.xslg_gap.toFixed(3)}</div>
                                )}
                                {exploiter.modernAnalytics.expectedStatsGap.woba_gap && (
                                  <div>‚Ä¢ wOBA Gap: {exploiter.modernAnalytics.expectedStatsGap.woba_gap.toFixed(3)}</div>
                                )}
                              </div>
                            )}
                            {exploiter.modernAnalytics.arsenalVulnerability && exploiter.modernAnalytics.arsenalVulnerability.length > 0 && (
                              <div className="vulnerable-pitches">
                                <strong>üéØ Vulnerable Pitches:</strong>
                                {exploiter.modernAnalytics.arsenalVulnerability.map((pitch, idx) => (
                                  <div key={idx} className="pitch-vulnerability">
                                    ‚Ä¢ {pitch.pitch}: {(pitch.ba_against * 100).toFixed(1)}% BA ({pitch.usage}% usage)
                                  </div>
                                ))}
                              </div>
                            )}
                            {exploiter.modernAnalytics.arsenalExploitation?.best_matchups?.length > 0 && (
                              <div className="best-matchups">
                                <strong>‚ö° Best Matchups:</strong>
                                {exploiter.modernAnalytics.arsenalExploitation.best_matchups.map((matchup, idx) => (
                                  <div key={idx} className="matchup-detail">
                                    ‚Ä¢ {matchup}
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        </div>
                      )}

                      <div className="detail-section">
                        <h4>üìä Analysis Metadata</h4>
                        <div className="metadata">
                          {exploiter.analysisTimestamp && (
                            <div><strong>Generated:</strong> {new Date(exploiter.analysisTimestamp).toLocaleString()}</div>
                          )}
                          <div><strong>Version:</strong> Enhanced V3.0</div>
                          {exploiter.comprehensiveJustification && (
                            <div className="comprehensive-justification">
                              <strong>üß† AI Analysis:</strong> {exploiter.comprehensiveJustification}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </GlassScrollableContainer>

      <div className="card-footer">
        <div className="footer-stats">
          <span>Showing {filteredExploiters.length} exploiters</span>
          <span>‚Ä¢</span>
          <span>Based on pre-generated analysis data</span>
        </div>
      </div>
    </GlassCard>
  );
};

export default WeakspotExploitersCard;